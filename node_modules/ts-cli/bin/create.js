/**
 * Usage: 新建项目
 * Author: Spikef < Spikef@Foxmail.com >
 * Copyright: Envirs Team < http://envirs.com >
 */

'use strict';

var fs = require('fs-arm');
var path = require('path');
var io = require('inquirer');
var os = require('os');
var chalk = require('chalk');
var spawn = require('cross-spawn').sync;
var projects = require('../lib/project.json');
var git = require('../lib/git-user');

module.exports = function (name, options) {
    var exist = name ? fs.existsSync(path.resolve(process.cwd(), './' + name)) : false;
    var author = git();

    var questions = [
        {
            type: 'input',
            name: 'name',
            message: '项目名称',
            when: !name,
            validate: val => {
                if (!val) {
                    return '项目名称不能为空';
                } else if (!/^[a-z0-9\-_]+$/i.test(val)) {
                    return '项目名称只能包含英文字母、数字、短横杠或者下划线';
                } else if (fs.existsSync(path.resolve(process.cwd(), './' + val))) {
                    if (os.platform() === 'win32') {
                        return '项目已存在';
                    } else {
                        exist = true;
                        return true;
                    }
                } else {
                    return true;
                }
            }
        },
        {
            type: 'confirm',
            name: 'overwrite',
            message: '项目文件夹已存在, 是否覆盖',
            when: exist
        },
        {
            type: 'input',
            name: 'description',
            message: '项目描述',
            when: answers => !exist || answers.overwrite
        },
        {
            type: 'list',
            name: 'type',
            message: '项目类型',
            when: answers => !exist || answers.overwrite,
            choices: () => {
                var arr = [];
                Object.keys(projects).forEach(name => {
                    arr.push({
                        name: name + ' - ' + projects[name].description,
                        value: name
                    })
                });
                
                return arr;
            }
        },
        {
            type: 'input',
            name: 'user',
            message: '项目作者用户名',
            when: answers => !exist || answers.overwrite,
            default: author.name
        },
        {
            type: 'input',
            name: 'email',
            message: '项目作者邮箱',
            when: answers => !exist || answers.overwrite,
            default: author.email
        },
        {
            type: 'input',
            name: 'port',
            message: '服务运行端口号',
            when: answers => !exist || answers.overwrite,
            default: 8850
        }
    ];

    io.prompt(questions)
        .then(answers => {
            if (exist && !answers.overwrite) return;

            answers.name = answers.name || name;
            
            var source = path.resolve(__dirname, '../templates', projects[answers.type].folder);
            var target = path.resolve(process.cwd(), answers.name);

            fs.emptydirSync(target);
            fs.copyFolderSync(source, target);
            
            fs.readdirsSync(target).files.forEach(file => {
                if (/\.gitkeep$/.test(file)) fs.unlinkSync(file); 
            });

            var _packet = path.resolve(target, 'package.json');
            var packet = fs.readJsonSync(_packet);

            packet.name = answers.name;
            packet.description = answers.description;
            packet.author = {
                name: answers.user,
                email: answers.email
            };

            fs.writeFileSync(_packet, JSON.stringify(packet, null, 4));

            var handle;
            handle = path.resolve(target, 'handle.js');
            if (fs.existsSync(handle)) fs.unlinkSync(handle);
            
            handle = path.resolve(source, 'handle.js');
            if (fs.existsSync(handle)) {
                handle = require(handle);
                handle(target, answers);
            }

            console.log('');
            console.log(chalk.red('$ npm install'));
            console.log('');
            var result = spawn('npm', ['install'], { cwd: target, stdio: 'inherit'});
            console.log('');
            if (result.status != 0) {
                console.log(chalk.yellow('! 安装依赖失败，请使用[npm install]手动安装依赖'))
            } else {
                console.log(chalk.green('√ 成功创建项目，请查看项目下的说明文档'))
            }
        });
};