/**
 * Usage: *
 * Author: Spikef < Spikef@Foxmail.com >
 * Copyright: Envirs Team < http://envirs.com >
 */

var fs = require('fs');
var fso = fs.fso;

fs.copySync = function(source, target, overwrite) {
    if ( !overwrite && this.existsSync(target) ) return;

    var path = require('path');
    if ( !target.contains(':') ) {
        target = path.resolve(fso.GetParentFolderName(source), target);
    };

    if ( fso.FileExists(source) ) {
        fso.CopyFile(source, target)
    } else if ( fso.FolderExists(source) ) {
        fso.CopyFolder(source, target)
    }
};

fs.moveSync = function(source, target, overwrite) {
    if ( !overwrite && this.existsSync(target) ) return;

    var path = require('path');
    if ( !target.contains(':') ) {
        target = path.resolve(fso.GetParentFolderName(source), target);
    };

    if ( fso.FileExists(source) ) {
        fso.MoveFile(source, target)
    } else if ( fso.FolderExists(source) ) {
        fso.MoveFolder(source, target)
    }
};

fs.removeSync = function(dir) {
    if ( fso.FileExists(dir) ) {
        fso.DeleteFile(dir, true);
    } else if ( fso.FolderExists(dir) ) {
        fso.DeleteFolder(dir, true);
    }
};

fs.emptydirSync = function(dir) {
    if ( fso.FolderExists(dir) ) {
        var tars = this.readdirsSync(dir);
        tars.files.forEach(function(file) {fso.DeleteFile(file, true)});
        tars.folders.forEach(function(folder) {fso.DeleteFolder(folder, true)});
    } else {
        makeDirs(dir);
    }
};

fs.ensureFile = function(file) {
    if ( !fso.FileExists(file) ) {
        makeDirs(file, true);

        fso.CreateTextFile(file);
    }
};

fs.ensureDir = function(dir) {
    if ( !fso.FolderExists(dir) ) {
        makeDirs(dir);
    }
};

fs.mkdirsSync = function(dir) {
    makeDirs(dir);

    return fso.FolderExists(dir);
};

fs.readdirsSync = function(dir) {
    dir = dir.contains(':') ? dir : require('path').resolve(dir);

    if ( fso.FolderExists(dir) ) {
        var obj = new ActiveXObject('Scripting.FileSystemObject');

        var files = [], folders = [];
        var read = function (folder) {
            var fo = obj.GetFolder(folder);

            var fc = new Enumerator(fo.Files);
            for (; !fc.atEnd(); fc.moveNext())
            {
                files.push(fc.item().Path);
            }

            var dc = new Enumerator(fo.SubFolders);
            for (; !dc.atEnd(); dc.moveNext())
            {
                folders.push(dc.item().Path);

                read(dc.item().Path);
            }
        };

        read(dir);

        return { folders: folders, files: files };
    } else {
        return { folders: [], files: [] };
    }
};

fs.saveFileSync = function(file, data, options, append) {
    makeDirs(file, true);

    if ( append === true || options === true ) {
        this.appendFileSync(file, data, options)
    } else {
        this.writeFileSync(file, data, options)
    }
};

fs.readJsonSync = fs.readJSONSync = function(file) {
    var data = this.readFileSync(file, 'utf8');
    var json = JSON.parse(data);

    return json;
};

fs.saveJsonSync = fs.saveJSONSync = function(file, json, format) {
    var data = format ? JSON.format(json) : JSON.stringify(json);

    this.saveFileSync(file, data, 'utf8');
};

// 循环创建文件夹
function makeDirs(fullPath, isFile) {
    var path = require('path');

    var root = Server.MapPath('/');
    var parent = isFile ? path.dirname(fullPath) : fullPath;
    var dirs = path.relative(root, parent).replace(/\\/g, '/').split('/');

    dirs.forEach(function(dir) {
        root = path.resolve(root, dir);
        if ( !fso.FolderExists(root) ) {
            fso.CreateFolder(root);
        }
    });

    return fullPath;
};

module.exports = fs;