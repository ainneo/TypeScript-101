/**
 * Usage: *
 * Author: Spikef < Spikef@Foxmail.com >
 * Copyright: Envirs Team < http://envirs.com >
 */

var fs = require('fs');
var path = require('path');

var BUF_LENGTH = 64 * 1024;
var BUF_EMPTY = new Buffer(BUF_LENGTH);
fs.copyFileSync = function(source, target, options) {
    options = options || {overwrite: true, timeStamp: true};

    var overWrite = options.overwrite !== false;
    var timeStamp = options.timeStamp !== false;

    if (fs.existsSync(target)) {
        if (overWrite) {
            fs.chmodSync(target, parseInt('777', 8));
            fs.unlinkSync(target);
        } else {
            throw Error('File is already exist!');
        }
    }

    var parent = path.dirname(target);
    this.mkdirsSync(parent);

    var fdr = fs.openSync(source, 'r');
    var stat = fs.fstatSync(fdr);
    var fdw = fs.openSync(target, 'w', stat.mode);
    var bytesRead = 1;
    var pos = 0;

    while (bytesRead > 0) {
        bytesRead = fs.readSync(fdr, BUF_EMPTY, 0, BUF_LENGTH, pos);
        fs.writeSync(fdw, BUF_EMPTY, 0, bytesRead);
        pos += bytesRead;
    }

    if (timeStamp) {
        fs.futimesSync(fdw, stat.atime, stat.mtime);
    }

    fs.closeSync(fdr);
    fs.closeSync(fdw);
};

fs.copyFolderSync = function(source, target) {
    source = path.resolve(process.cwd(), source);
    target = path.resolve(process.cwd(), target);

    var self = this, file;
    var dirList = this.readdirsSync(source);
    dirList.folders.forEach(function(folder) {
        folder = target + folder.replace(source, '');
        self.mkdirsSync(folder);
    });
    dirList.files.forEach(function(base) {
        file = target + base.replace(source, '');
        self.copyFileSync(base, file);
    });
};

fs.copySync = function(source, target, overwrite) {
    if ( !overwrite && this.existsSync(target) ) return;

    if (fs.existsSync(source)) {
        if (fs.lstatSync(source).isDirectory()) {
            this.copyFolderSync(source, target);
        } else if (fs.lstatSync(source).isFile()) {
            this.copyFileSync(source, target, {overwrite: overwrite});
        }
    }
};

fs.readdirsSync = function(dir) {
    dir = path.resolve(process.cwd(), dir);

    var folders = [], files = [];
    var read = function(full) {
        var dirList = fs.readdirSync(full);

        dirList.forEach(function(item){
            item = full + path.sep + item;
            if( fs.statSync(item).isFile() ){
                files.push(item);
            }
        });

        dirList.forEach(function(item){
            item = full + path.sep + item;
            if( fs.statSync(item).isDirectory() ) {
                folders.push(item);
                read(item);
            }
        });
    };

    read(dir);

    return {
        folders: folders,
        files: files
    }
};

fs.mkdirsSync = function(dir, test) {
    dir = path.resolve(process.cwd(), dir);
    if ( test && path.basename(dir).indexOf('.') > 0 ) dir = path.dirname(dir);
    var folders = dir.split(/\/|\\/).slice(1);
    var fullDir = dir.substring(0, dir.indexOf(folders[0]));  // 取盘符
    folders.forEach(function(name) {
        fullDir += name + path.sep;
        fullDir = path.normalize(fullDir);
        !fs.existsSync(fullDir) && fs.mkdirSync(fullDir);
    })
};

fs.removeSync = function(dir) {
    if (fs.existsSync(dir)) {
        if (fs.lstatSync(dir).isDirectory()) {
            this.emptydirSync(dir);
            fs.rmdirSync(dir);
        } else if (fs.lstatSync(dir).isFile()) {
            this.unlinkSync(dir);
        }
    }
};

fs.emptydirSync = function(dir) {
    dir = path.resolve(process.cwd(), dir);
    if ( !fs.existsSync(dir) ) {
        this.mkdirsSync(dir);
    } else {
        var dirList = this.readdirsSync(dir);
        dirList.files.forEach(function(file) {
            fs.unlinkSync(file);
        });
        for (var i=dirList.folders.length-1;i>=0;i--) {
            fs.rmdirSync(dirList.folders[i]);
        }
    }
};

fs.moveSync = function(source, target) {
    source = path.resolve(process.cwd(), source);
    if( fs.statSync(source).isFile() ){
        this.copyFileSync(source, target);
        fs.unlinkSync(source);
    } else {
        this.copyFolderSync(source, target);
        this.moveSync(source);
    }
};

fs.ensureFile = function(file) {
    if ( !fs.existsSync(file) ) {
        fs.writeFileSync(file, '');
    }
};

fs.ensureDir = function(dir) {
    if ( !fs.existsSync(dir) ) {
        this.mkdirsSync(dir);
    }
};

fs.saveFileSync = function(file, data, options, append) {
    this.mkdirsSync(file + '.');

    if ( append === true || options === true ) {
        this.appendFileSync(file, data, options)
    } else {
        this.writeFileSync(file, data, options)
    }
};

fs.readJsonSync = fs.readJSONSync = function(file) {
    var data = this.readFileSync(file, 'utf8');
    var json = JSON.parse(data);

    return json;
};

fs.saveJsonSync = fs.saveJSONSync = function(file, json, format) {
    var data = format ? JSON.format(json) : JSON.stringify(json);

    this.saveFileSync(file, data, 'utf8');
};

module.exports =fs;